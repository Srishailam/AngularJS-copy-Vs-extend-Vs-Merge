AngularJS-Copy


angular.copy is a deep copy.
============================

var e1 = { name: 'David', age: 26, skill: {} };
var e2 = angular.copy(e1);

console.log(e2);
// Output: { name: 'David', age: 26, skill: {} }

console.log(e1 === e2);
// Output: false

console.log(e1.skill === e2.skill);
// Output: false
// e2.skill is a copy of e1.skill. They don't point to the same skill object. They both are unique objects.

Extend
============================
angular.extend(dst, src1, src2, ...) is to shallow copy the properties of the source objects from right to left, all the way to the destination object.

var src1 = { name: 'David', age: 30 }; // source 1
var src2 = { age: 26, skill: {} }; // source 2
var dst = {}; // destination

console.log(angular.extend(dst, src1, src2));
// Output: { name: 'David', age: 26, skill: {} }

console.log(src2.skill === dst.skill);
// Output: true
// src2 and dst share the same skill object due to shallow copy.

Merge
===========================
angular.merge is an Angular 1.4+ API that is to deep (recursively) copy the properties of the source objects to the destination object.

Here we use the above example, and replace angular.extend with angular.merge:

var src1 = { name: 'David', age: 30 };
var src2 = { age: 26, skill: {} };
var dst = {};

console.log(angular.merge(dst, src1, src2));
// Output: { name: 'David', age: 26, skill: {} }
// It seems to the same result as the previous example's, however, ...

console.log(src2.skill === dst.skill);
// Output: false
// src2.skill and dst.skill point to different skill objects due to deep copy.


More Extend vs. Merge
=======================
angular.copy is simply to clone an object. angular.extend and angular.merge are more interesting. Here is another set of comparing examples.

angular.extend – shallow copy:

var src1 = { skill: { name: 'Java', experience: 20, certified: true } };
var src2 = { skill: { name: 'JavaScript', experience: 10 } };
var dst = {};

console.log(angular.extend(dst, src1, src2));
// Output: { skill: { name: 'JavaScript', experience: 10 } }
certified: true is lost. Because of shallow copy, the skill property is assigned from src2 to src1 without recursively copying the individual properties inside the skill value.

The same code yields totally different result if we replace extend with merge:

angular.merge – deep (recursive) copy:

var src1 = { skill: { name: 'Java', experience: 20, certified: true } };
var src2 = { skill: { name: 'JavaScript', experience: 10 } };
var dst = {};

console.log(angular.merge(dst, src1, src2));
// Output: { skill: { name: 'JavaScript', experience: 10, certified: true } }
With angular.merge, properties are recursively copied from src2 to src1, so certified: true is reserved.
